#version 430

out vec4 outColor;

in vec4 vNormal;
in vec4 vPosition;
in vec2 UV;

layout(location = 1)uniform mat4 view;
layout(location = 3)uniform sampler2D diffuseMap;


void main()
{
	vec4 lDir = normalize(vec4(-1,-1,-1,0));
	vec4 camPos = inverse(view)[3];
	float specPower = 8.f;

	vec4 la = vec4(0, 0.4f,.4f,1.f),
	     ld = vec4(1,1,1,1),
             ls = vec4(1,1,1,1); 
	vec4 sa = vec4(.4f,.4f,.4f,1.f),
	     sd = texture(diffuseMap, UV),
             ss = vec4(1,0,0,1);


	vec4 R = reflect(lDir, vNormal); 	// light reflection
	vec4 E = normalize(camPos - vPosition); // eye direction


	float lamb = max(0.0f, -dot(vNormal, lDir)); //clamp between 0-1
	
	float spec = pow(max(0.0f, dot(R,E)), specPower);

	vec4 ambient  = la * sa;
	vec4 diffuse  = ld * lamb * sd;
	vec4 specular = ls * spec * ss;
	
	outColor = ambient + diffuse + specular;	
}